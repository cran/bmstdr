// Generated by rstantools.  Do not edit by hand.

/*
    bmstdr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bmstdr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bmstdr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_ind_gpp_marginal_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 137> locations_array__ =
  {" (found before start of program)",
  " (in 'ind_gpp_marginal', line 51, column 2 to column 17)",
  " (in 'ind_gpp_marginal', line 52, column 2 to column 20)",
  " (in 'ind_gpp_marginal', line 53, column 2 to column 25)",
  " (in 'ind_gpp_marginal', line 54, column 2 to column 42)",
  " (in 'ind_gpp_marginal', line 56, column 2 to column 23)",
  " (in 'ind_gpp_marginal', line 59, column 0 to column 18)",
  " (in 'ind_gpp_marginal', line 60, column 0 to column 24)",
  " (in 'ind_gpp_marginal', line 62, column 8 to column 10)",
  " (in 'ind_gpp_marginal', line 62, column 12 to column 14)",
  " (in 'ind_gpp_marginal', line 62, column 0 to column 22)",
  " (in 'ind_gpp_marginal', line 63, column 8 to column 10)",
  " (in 'ind_gpp_marginal', line 63, column 12 to column 14)",
  " (in 'ind_gpp_marginal', line 63, column 0 to column 22)",
  " (in 'ind_gpp_marginal', line 64, column 8 to column 9)",
  " (in 'ind_gpp_marginal', line 64, column 11 to column 13)",
  " (in 'ind_gpp_marginal', line 64, column 0 to column 20)",
  " (in 'ind_gpp_marginal', line 65, column 0 to column 19)",
  " (in 'ind_gpp_marginal', line 68, column 5 to column 42)",
  " (in 'ind_gpp_marginal', line 70, column 5 to column 29)",
  " (in 'ind_gpp_marginal', line 67, column 18 to line 71, column 4)",
  " (in 'ind_gpp_marginal', line 67, column 0 to line 71, column 4)",
  " (in 'ind_gpp_marginal', line 66, column 18 to line 72, column 2)",
  " (in 'ind_gpp_marginal', line 66, column 0 to line 72, column 2)",
  " (in 'ind_gpp_marginal', line 73, column 15 to column 33)",
  " (in 'ind_gpp_marginal', line 73, column 0 to column 33)",
  " (in 'ind_gpp_marginal', line 74, column 0 to column 27)",
  " (in 'ind_gpp_marginal', line 77, column 4 to column 42)",
  " (in 'ind_gpp_marginal', line 76, column 18 to line 78, column 5)",
  " (in 'ind_gpp_marginal', line 76, column 2 to line 78, column 5)",
  " (in 'ind_gpp_marginal', line 75, column 15 to line 79, column 3)",
  " (in 'ind_gpp_marginal', line 75, column 0 to line 79, column 3)",
  " (in 'ind_gpp_marginal', line 82, column 1 to column 9)",
  " (in 'ind_gpp_marginal', line 85, column 11 to column 17)",
  " (in 'ind_gpp_marginal', line 85, column 19 to column 25)",
  " (in 'ind_gpp_marginal', line 85, column 3 to column 30)",
  " (in 'ind_gpp_marginal', line 86, column 11 to column 17)",
  " (in 'ind_gpp_marginal', line 86, column 19 to column 21)",
  " (in 'ind_gpp_marginal', line 86, column 3 to column 26)",
  " (in 'ind_gpp_marginal', line 88, column 3 to column 40)",
  " (in 'ind_gpp_marginal', line 89, column 3 to column 36)",
  " (in 'ind_gpp_marginal', line 91, column 5 to column 24)",
  " (in 'ind_gpp_marginal', line 90, column 23 to line 92, column 4)",
  " (in 'ind_gpp_marginal', line 90, column 3 to line 92, column 4)",
  " (in 'ind_gpp_marginal', line 96, column 6 to column 25)",
  " (in 'ind_gpp_marginal', line 97, column 6 to column 15)",
  " (in 'ind_gpp_marginal', line 95, column 26 to line 98, column 7)",
  " (in 'ind_gpp_marginal', line 95, column 6 to line 98, column 7)",
  " (in 'ind_gpp_marginal', line 94, column 24 to line 99, column 4)",
  " (in 'ind_gpp_marginal', line 94, column 4 to line 99, column 4)",
  " (in 'ind_gpp_marginal', line 83, column 19 to line 100, column 1)",
  " (in 'ind_gpp_marginal', line 83, column 1 to line 100, column 1)",
  " (in 'ind_gpp_marginal', line 81, column 1 to line 101, column 1)",
  " (in 'ind_gpp_marginal', line 61, column 0 to line 102, column 1)",
  " (in 'ind_gpp_marginal', line 111, column 7 to column 8)",
  " (in 'ind_gpp_marginal', line 111, column 0 to column 13)",
  " (in 'ind_gpp_marginal', line 112, column 0 to column 8)",
  " (in 'ind_gpp_marginal', line 113, column 1 to column 56)",
  " (in 'ind_gpp_marginal', line 114, column 1 to column 50)",
  " (in 'ind_gpp_marginal', line 115, column 20 to column 74)",
  " (in 'ind_gpp_marginal', line 115, column 1 to column 74)",
  " (in 'ind_gpp_marginal', line 116, column 20 to column 72)",
  " (in 'ind_gpp_marginal', line 116, column 1 to column 72)",
  " (in 'ind_gpp_marginal', line 117, column 20 to column 73)",
  " (in 'ind_gpp_marginal', line 117, column 1 to column 73)",
  " (in 'ind_gpp_marginal', line 118, column 16 to column 84)",
  " (in 'ind_gpp_marginal', line 118, column 1 to column 84)",
  " (in 'ind_gpp_marginal', line 120, column 4 to column 34)",
  " (in 'ind_gpp_marginal', line 119, column 2 to line 120, column 34)",
  " (in 'ind_gpp_marginal', line 124, column 4 to column 37)",
  " (in 'ind_gpp_marginal', line 123, column 2 to line 124, column 37)",
  " (in 'ind_gpp_marginal', line 122, column 17 to line 125, column 2)",
  " (in 'ind_gpp_marginal', line 122, column 1 to line 125, column 2)",
  " (in 'ind_gpp_marginal', line 128, column 10 to column 16)",
  " (in 'ind_gpp_marginal', line 128, column 3 to column 21)",
  " (in 'ind_gpp_marginal', line 129, column 10 to column 16)",
  " (in 'ind_gpp_marginal', line 129, column 3 to column 22)",
  " (in 'ind_gpp_marginal', line 130, column 11 to column 17)",
  " (in 'ind_gpp_marginal', line 130, column 19 to column 25)",
  " (in 'ind_gpp_marginal', line 130, column 3 to column 30)",
  " (in 'ind_gpp_marginal', line 133, column 3 to column 36)",
  " (in 'ind_gpp_marginal', line 134, column 3 to column 42)",
  " (in 'ind_gpp_marginal', line 138, column 6 to column 25)",
  " (in 'ind_gpp_marginal', line 139, column 6 to column 15)",
  " (in 'ind_gpp_marginal', line 137, column 26 to line 140, column 7)",
  " (in 'ind_gpp_marginal', line 137, column 6 to line 140, column 7)",
  " (in 'ind_gpp_marginal', line 136, column 25 to line 141, column 6)",
  " (in 'ind_gpp_marginal', line 136, column 5 to line 141, column 6)",
  " (in 'ind_gpp_marginal', line 143, column 3 to column 30)",
  " (in 'ind_gpp_marginal', line 126, column 19 to line 144, column 1)",
  " (in 'ind_gpp_marginal', line 126, column 1 to line 144, column 1)",
  " (in 'ind_gpp_marginal', line 15, column 0 to column 15)",
  " (in 'ind_gpp_marginal', line 16, column 0 to column 16)",
  " (in 'ind_gpp_marginal', line 17, column 0 to column 16)",
  " (in 'ind_gpp_marginal', line 18, column 0 to column 15)",
  " (in 'ind_gpp_marginal', line 19, column 0 to column 34)",
  " (in 'ind_gpp_marginal', line 20, column 0 to column 20)",
  " (in 'ind_gpp_marginal', line 21, column 0 to column 19)",
  " (in 'ind_gpp_marginal', line 22, column 6 to column 12)",
  " (in 'ind_gpp_marginal', line 22, column 0 to column 32)",
  " (in 'ind_gpp_marginal', line 23, column 6 to column 11)",
  " (in 'ind_gpp_marginal', line 23, column 0 to column 30)",
  " (in 'ind_gpp_marginal', line 24, column 6 to column 7)",
  " (in 'ind_gpp_marginal', line 24, column 0 to column 18)",
  " (in 'ind_gpp_marginal', line 25, column 0 to column 9)",
  " (in 'ind_gpp_marginal', line 26, column 6 to column 10)",
  " (in 'ind_gpp_marginal', line 26, column 0 to column 20)",
  " (in 'ind_gpp_marginal', line 27, column 6 to column 10)",
  " (in 'ind_gpp_marginal', line 27, column 0 to column 20)",
  " (in 'ind_gpp_marginal', line 28, column 6 to column 10)",
  " (in 'ind_gpp_marginal', line 28, column 0 to column 26)",
  " (in 'ind_gpp_marginal', line 29, column 6 to column 10)",
  " (in 'ind_gpp_marginal', line 29, column 0 to column 24)",
  " (in 'ind_gpp_marginal', line 31, column 0 to column 12)",
  " (in 'ind_gpp_marginal', line 34, column 7 to column 8)",
  " (in 'ind_gpp_marginal', line 34, column 10 to column 12)",
  " (in 'ind_gpp_marginal', line 34, column 0 to column 20)",
  " (in 'ind_gpp_marginal', line 35, column 7 to column 9)",
  " (in 'ind_gpp_marginal', line 35, column 11 to column 13)",
  " (in 'ind_gpp_marginal', line 35, column 0 to column 20)",
  " (in 'ind_gpp_marginal', line 36, column 6 to column 11)",
  " (in 'ind_gpp_marginal', line 36, column 0 to column 23)",
  " (in 'ind_gpp_marginal', line 37, column 7 to column 8)",
  " (in 'ind_gpp_marginal', line 37, column 10 to column 11)",
  " (in 'ind_gpp_marginal', line 37, column 0 to column 15)",
  " (in 'ind_gpp_marginal', line 38, column 0 to column 36)",
  " (in 'ind_gpp_marginal', line 39, column 0 to column 34)",
  " (in 'ind_gpp_marginal', line 40, column 0 to column 21)",
  " (in 'ind_gpp_marginal', line 41, column 0 to column 40)",
  " (in 'ind_gpp_marginal', line 44, column 2 to column 15)",
  " (in 'ind_gpp_marginal', line 47, column 4 to column 38)",
  " (in 'ind_gpp_marginal', line 46, column 20 to line 48, column 3)",
  " (in 'ind_gpp_marginal', line 46, column 2 to line 48, column 3)",
  " (in 'ind_gpp_marginal', line 51, column 9 to column 10)",
  " (in 'ind_gpp_marginal', line 54, column 8 to column 28)",
  " (in 'ind_gpp_marginal', line 59, column 7 to column 8)",
  " (in 'ind_gpp_marginal', line 60, column 6 to column 12)"};
#include <stan_meta_header.hpp>
class model_ind_gpp_marginal final : public model_base_crtp<model_ind_gpp_marginal> {
private:
  int n;
  int tn;
  int m2;
  int p;
  int missing;
  int ntmiss;
  int ntobs;
  std::vector<int> data_miss_idx;
  std::vector<int> data_obs_idx;
  std::vector<int> time;
  int nots;
  std::vector<int> ots;
  std::vector<int> nts;
  std::vector<int> start_row;
  std::vector<int> fin_row;
  int n_misst;
  Eigen::Matrix<double,-1,-1> Cdist_data__;
  Eigen::Matrix<double,-1,-1> dmat_data__;
  std::vector<double> yobs;
  Eigen::Matrix<double,-1,-1> X_data__;
  std::vector<double> sigma2_prior;
  std::vector<double> tau2_prior;
  int phidist;
  std::vector<double> prior_phi_param;
  int sumnt2;
  int z_miss_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Cdist{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> dmat{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
public:
  ~model_ind_gpp_marginal() {}
  model_ind_gpp_marginal(stan::io::var_context& context__, unsigned int
                         random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_ind_gpp_marginal_namespace::model_ind_gpp_marginal";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 91;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 91;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 91;
      stan::math::check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 92;
      context__.validate_dims("data initialization", "tn", "int",
        std::vector<size_t>{});
      tn = std::numeric_limits<int>::min();
      current_statement__ = 92;
      tn = context__.vals_i("tn")[(1 - 1)];
      current_statement__ = 92;
      stan::math::check_greater_or_equal(function__, "tn", tn, 0);
      current_statement__ = 93;
      context__.validate_dims("data initialization", "m2", "int",
        std::vector<size_t>{});
      m2 = std::numeric_limits<int>::min();
      current_statement__ = 93;
      m2 = context__.vals_i("m2")[(1 - 1)];
      current_statement__ = 93;
      stan::math::check_greater_or_equal(function__, "m2", m2, 0);
      current_statement__ = 94;
      context__.validate_dims("data initialization", "p", "int",
        std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      current_statement__ = 94;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 94;
      stan::math::check_greater_or_equal(function__, "p", p, 0);
      current_statement__ = 95;
      context__.validate_dims("data initialization", "missing", "int",
        std::vector<size_t>{});
      missing = std::numeric_limits<int>::min();
      current_statement__ = 95;
      missing = context__.vals_i("missing")[(1 - 1)];
      current_statement__ = 95;
      stan::math::check_greater_or_equal(function__, "missing", missing, 0);
      current_statement__ = 95;
      stan::math::check_less_or_equal(function__, "missing", missing, 1);
      current_statement__ = 96;
      context__.validate_dims("data initialization", "ntmiss", "int",
        std::vector<size_t>{});
      ntmiss = std::numeric_limits<int>::min();
      current_statement__ = 96;
      ntmiss = context__.vals_i("ntmiss")[(1 - 1)];
      current_statement__ = 96;
      stan::math::check_greater_or_equal(function__, "ntmiss", ntmiss, 0);
      current_statement__ = 97;
      context__.validate_dims("data initialization", "ntobs", "int",
        std::vector<size_t>{});
      ntobs = std::numeric_limits<int>::min();
      current_statement__ = 97;
      ntobs = context__.vals_i("ntobs")[(1 - 1)];
      current_statement__ = 97;
      stan::math::check_greater_or_equal(function__, "ntobs", ntobs, 0);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("data_miss_idx", "ntmiss",
        ntmiss);
      current_statement__ = 99;
      context__.validate_dims("data initialization", "data_miss_idx", "int",
        std::vector<size_t>{static_cast<size_t>(ntmiss)});
      data_miss_idx = std::vector<int>(ntmiss,
                        std::numeric_limits<int>::min());
      current_statement__ = 99;
      data_miss_idx = context__.vals_i("data_miss_idx");
      current_statement__ = 100;
      stan::math::validate_non_negative_index("data_obs_idx", "ntobs", ntobs);
      current_statement__ = 101;
      context__.validate_dims("data initialization", "data_obs_idx", "int",
        std::vector<size_t>{static_cast<size_t>(ntobs)});
      data_obs_idx = std::vector<int>(ntobs, std::numeric_limits<int>::min());
      current_statement__ = 101;
      data_obs_idx = context__.vals_i("data_obs_idx");
      current_statement__ = 102;
      stan::math::validate_non_negative_index("time", "n", n);
      current_statement__ = 103;
      context__.validate_dims("data initialization", "time", "int",
        std::vector<size_t>{static_cast<size_t>(n)});
      time = std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 103;
      time = context__.vals_i("time");
      current_statement__ = 104;
      context__.validate_dims("data initialization", "nots", "int",
        std::vector<size_t>{});
      nots = std::numeric_limits<int>::min();
      current_statement__ = 104;
      nots = context__.vals_i("nots")[(1 - 1)];
      current_statement__ = 105;
      stan::math::validate_non_negative_index("ots", "nots", nots);
      current_statement__ = 106;
      context__.validate_dims("data initialization", "ots", "int",
        std::vector<size_t>{static_cast<size_t>(nots)});
      ots = std::vector<int>(nots, std::numeric_limits<int>::min());
      current_statement__ = 106;
      ots = context__.vals_i("ots");
      current_statement__ = 107;
      stan::math::validate_non_negative_index("nts", "nots", nots);
      current_statement__ = 108;
      context__.validate_dims("data initialization", "nts", "int",
        std::vector<size_t>{static_cast<size_t>(nots)});
      nts = std::vector<int>(nots, std::numeric_limits<int>::min());
      current_statement__ = 108;
      nts = context__.vals_i("nts");
      current_statement__ = 109;
      stan::math::validate_non_negative_index("start_row", "nots", nots);
      current_statement__ = 110;
      context__.validate_dims("data initialization", "start_row", "int",
        std::vector<size_t>{static_cast<size_t>(nots)});
      start_row = std::vector<int>(nots, std::numeric_limits<int>::min());
      current_statement__ = 110;
      start_row = context__.vals_i("start_row");
      current_statement__ = 111;
      stan::math::validate_non_negative_index("fin_row", "nots", nots);
      current_statement__ = 112;
      context__.validate_dims("data initialization", "fin_row", "int",
        std::vector<size_t>{static_cast<size_t>(nots)});
      fin_row = std::vector<int>(nots, std::numeric_limits<int>::min());
      current_statement__ = 112;
      fin_row = context__.vals_i("fin_row");
      current_statement__ = 113;
      context__.validate_dims("data initialization", "n_misst", "int",
        std::vector<size_t>{});
      n_misst = std::numeric_limits<int>::min();
      current_statement__ = 113;
      n_misst = context__.vals_i("n_misst")[(1 - 1)];
      current_statement__ = 114;
      stan::math::validate_non_negative_index("Cdist", "n", n);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("Cdist", "m2", m2);
      current_statement__ = 116;
      context__.validate_dims("data initialization", "Cdist", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(m2)});
      Cdist_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, m2,
                       std::numeric_limits<double>::quiet_NaN());
      new (&Cdist)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(Cdist_data__.data(), n, m2);
      {
        std::vector<local_scalar_t__> Cdist_flat__;
        current_statement__ = 116;
        Cdist_flat__ = context__.vals_r("Cdist");
        current_statement__ = 116;
        pos__ = 1;
        current_statement__ = 116;
        for (int sym1__ = 1; sym1__ <= m2; ++sym1__) {
          current_statement__ = 116;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 116;
            stan::model::assign(Cdist, Cdist_flat__[(pos__ - 1)],
              "assigning variable Cdist", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 116;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 117;
      stan::math::validate_non_negative_index("dmat", "m2", m2);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("dmat", "m2", m2);
      current_statement__ = 119;
      context__.validate_dims("data initialization", "dmat", "double",
        std::vector<size_t>{static_cast<size_t>(m2), static_cast<size_t>(m2)});
      dmat_data__ = Eigen::Matrix<double,-1,-1>::Constant(m2, m2,
                      std::numeric_limits<double>::quiet_NaN());
      new (&dmat) Eigen::Map<Eigen::Matrix<double,-1,-1>>(dmat_data__.data(),
        m2, m2);
      {
        std::vector<local_scalar_t__> dmat_flat__;
        current_statement__ = 119;
        dmat_flat__ = context__.vals_r("dmat");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1; sym1__ <= m2; ++sym1__) {
          current_statement__ = 119;
          for (int sym2__ = 1; sym2__ <= m2; ++sym2__) {
            current_statement__ = 119;
            stan::model::assign(dmat, dmat_flat__[(pos__ - 1)],
              "assigning variable dmat", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 119;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 120;
      stan::math::validate_non_negative_index("yobs", "ntobs", ntobs);
      current_statement__ = 121;
      context__.validate_dims("data initialization", "yobs", "double",
        std::vector<size_t>{static_cast<size_t>(ntobs)});
      yobs = std::vector<double>(ntobs,
               std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 121;
      yobs = context__.vals_r("yobs");
      current_statement__ = 122;
      stan::math::validate_non_negative_index("X", "n", n);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("X", "p", p);
      current_statement__ = 124;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(p)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), n, p);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 124;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 124;
        pos__ = 1;
        current_statement__ = 124;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 124;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 124;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 124;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 125;
      context__.validate_dims("data initialization", "sigma2_prior",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      sigma2_prior = std::vector<double>(2,
                       std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 125;
      sigma2_prior = context__.vals_r("sigma2_prior");
      current_statement__ = 125;
      stan::math::check_greater_or_equal(function__, "sigma2_prior",
        sigma2_prior, 0);
      current_statement__ = 126;
      context__.validate_dims("data initialization", "tau2_prior", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      tau2_prior = std::vector<double>(2,
                     std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 126;
      tau2_prior = context__.vals_r("tau2_prior");
      current_statement__ = 126;
      stan::math::check_greater_or_equal(function__, "tau2_prior",
        tau2_prior, 0);
      current_statement__ = 127;
      context__.validate_dims("data initialization", "phidist", "int",
        std::vector<size_t>{});
      phidist = std::numeric_limits<int>::min();
      current_statement__ = 127;
      phidist = context__.vals_i("phidist")[(1 - 1)];
      current_statement__ = 127;
      stan::math::check_greater_or_equal(function__, "phidist", phidist, 0);
      current_statement__ = 128;
      context__.validate_dims("data initialization", "prior_phi_param",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      prior_phi_param = std::vector<double>(2,
                          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 128;
      prior_phi_param = context__.vals_r("prior_phi_param");
      current_statement__ = 128;
      stan::math::check_greater_or_equal(function__, "prior_phi_param",
        prior_phi_param, 0);
      current_statement__ = 129;
      sumnt2 = std::numeric_limits<int>::min();
      current_statement__ = 129;
      sumnt2 = 0;
      current_statement__ = 132;
      for (int i = 1; i <= nots; ++i) {
        current_statement__ = 130;
        sumnt2 = (sumnt2 +
          (stan::model::rvalue(nts, "nts", stan::model::index_uni(i)) *
          stan::model::rvalue(nts, "nts", stan::model::index_uni(i))));
      }
      current_statement__ = 133;
      stan::math::validate_non_negative_index("beta", "p", p);
      current_statement__ = 134;
      z_miss_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 134;
      z_miss_1dim__ = (missing ? ntmiss : 0);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("z_miss",
        "missing ? ntmiss : 0", z_miss_1dim__);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("xbmodel", "n", n);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("bigS", "sumnt2", sumnt2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = p + 1 + 1 + z_miss_1dim__ + 1;
  }
  inline std::string model_name() const final {
    return "model_ind_gpp_marginal";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_ind_gpp_marginal_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 2;
      phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      local_scalar_t__ sigma_sq = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_sq = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      std::vector<local_scalar_t__> z_miss =
        std::vector<local_scalar_t__>(z_miss_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      z_miss = in__.template read<
                 std::vector<local_scalar_t__>>(z_miss_1dim__);
      local_scalar_t__ tau_sq = DUMMY_VAR__;
      current_statement__ = 5;
      tau_sq = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> xbmodel =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      std::vector<local_scalar_t__> bigS =
        std::vector<local_scalar_t__>(sumnt2, DUMMY_VAR__);
      {
        current_statement__ = 8;
        stan::math::validate_non_negative_index("Sigma", "m2", m2);
        current_statement__ = 9;
        stan::math::validate_non_negative_index("Sigma", "m2", m2);
        Eigen::Matrix<local_scalar_t__,-1,-1> Sigma =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(m2, m2,
            DUMMY_VAR__);
        current_statement__ = 11;
        stan::math::validate_non_negative_index("Swinv", "m2", m2);
        current_statement__ = 12;
        stan::math::validate_non_negative_index("Swinv", "m2", m2);
        Eigen::Matrix<local_scalar_t__,-1,-1> Swinv =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(m2, m2,
            DUMMY_VAR__);
        current_statement__ = 14;
        stan::math::validate_non_negative_index("Cmat", "n", n);
        current_statement__ = 15;
        stan::math::validate_non_negative_index("Cmat", "m2", m2);
        Eigen::Matrix<local_scalar_t__,-1,-1> Cmat =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, m2, DUMMY_VAR__);
        current_statement__ = 17;
        stan::model::assign(xbmodel, stan::math::multiply(X, beta),
          "assigning variable xbmodel");
        current_statement__ = 23;
        for (int i = 1; i <= (m2 - 1); ++i) {
          current_statement__ = 21;
          for (int j = (i + 1); j <= m2; ++j) {
            current_statement__ = 18;
            stan::model::assign(Sigma,
              stan::math::exp(((-1 * phi) *
                stan::model::rvalue(dmat, "dmat", stan::model::index_uni(i),
                  stan::model::index_uni(j)))), "assigning variable Sigma",
              stan::model::index_uni(i), stan::model::index_uni(j));
            current_statement__ = 19;
            stan::model::assign(Sigma,
              stan::model::rvalue(Sigma, "Sigma", stan::model::index_uni(i),
                stan::model::index_uni(j)), "assigning variable Sigma",
              stan::model::index_uni(j), stan::model::index_uni(i));
          }
        }
        current_statement__ = 25;
        for (int i = 1; i <= m2; ++i) {
          current_statement__ = 24;
          stan::model::assign(Sigma, 1.0, "assigning variable Sigma",
            stan::model::index_uni(i), stan::model::index_uni(i));
        }
        current_statement__ = 26;
        stan::model::assign(Swinv, stan::math::inverse_spd(Sigma),
          "assigning variable Swinv");
        current_statement__ = 31;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 29;
          for (int j = 1; j <= m2; ++j) {
            current_statement__ = 27;
            stan::model::assign(Cmat,
              stan::math::exp(((-1 * phi) *
                stan::model::rvalue(Cdist, "Cdist",
                  stan::model::index_uni(i), stan::model::index_uni(j)))),
              "assigning variable Cmat", stan::model::index_uni(i),
              stan::model::index_uni(j));
          }
        }
        {
          int m = std::numeric_limits<int>::min();
          current_statement__ = 32;
          m = 1;
          current_statement__ = 51;
          for (int i = 1; i <= nots; ++i) {
            current_statement__ = 33;
            stan::math::validate_non_negative_index("St", "nts[i]",
              stan::model::rvalue(nts, "nts", stan::model::index_uni(i)));
            current_statement__ = 34;
            stan::math::validate_non_negative_index("St", "nts[i]",
              stan::model::rvalue(nts, "nts", stan::model::index_uni(i)));
            Eigen::Matrix<local_scalar_t__,-1,-1> St =
              Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(stan::model::rvalue(
                                                                nts, "nts",
                                                                stan::model::index_uni(
                                                                  i)),
                stan::model::rvalue(nts, "nts", stan::model::index_uni(i)),
                DUMMY_VAR__);
            current_statement__ = 36;
            stan::math::validate_non_negative_index("Ct", "nts[i]",
              stan::model::rvalue(nts, "nts", stan::model::index_uni(i)));
            current_statement__ = 37;
            stan::math::validate_non_negative_index("Ct", "m2", m2);
            Eigen::Matrix<local_scalar_t__,-1,-1> Ct =
              Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(stan::model::rvalue(
                                                                nts, "nts",
                                                                stan::model::index_uni(
                                                                  i)), m2,
                DUMMY_VAR__);
            current_statement__ = 39;
            stan::model::assign(Ct,
              stan::model::rvalue(Cmat, "Cmat",
                stan::model::index_min_max(
                  stan::model::rvalue(start_row, "start_row",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(fin_row, "fin_row",
                    stan::model::index_uni(i))), stan::model::index_omni()),
              "assigning variable Ct");
            current_statement__ = 40;
            stan::model::assign(St,
              stan::math::multiply(
                stan::math::multiply(stan::math::multiply(sigma_sq, Ct),
                  Swinv), stan::math::transpose(Ct)), "assigning variable St");
            current_statement__ = 43;
            for (int j = 1; j <=
                 stan::model::rvalue(nts, "nts", stan::model::index_uni(i)); ++j) {
              current_statement__ = 41;
              stan::model::assign(St,
                (stan::model::rvalue(St, "St", stan::model::index_uni(j),
                   stan::model::index_uni(j)) + tau_sq),
                "assigning variable St", stan::model::index_uni(j),
                stan::model::index_uni(j));
            }
            current_statement__ = 49;
            for (int k = 1; k <=
                 stan::model::rvalue(nts, "nts", stan::model::index_uni(i)); ++k) {
              current_statement__ = 47;
              for (int j = 1; j <=
                   stan::model::rvalue(nts, "nts", stan::model::index_uni(i)); ++j) {
                current_statement__ = 44;
                stan::model::assign(bigS,
                  stan::model::rvalue(St, "St", stan::model::index_uni(k),
                    stan::model::index_uni(j)), "assigning variable bigS",
                  stan::model::index_uni(m));
                current_statement__ = 45;
                m = (m + 1);
              }
            }
          }
        }
      }
      {
        current_statement__ = 54;
        stan::math::validate_non_negative_index("z1", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> z1 =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        int m = std::numeric_limits<int>::min();
        current_statement__ = 56;
        m = 1;
        current_statement__ = 57;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(sigma_sq,
                         stan::model::rvalue(sigma2_prior, "sigma2_prior",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(sigma2_prior, "sigma2_prior",
                           stan::model::index_uni(2))));
        current_statement__ = 58;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(tau_sq,
                         stan::model::rvalue(tau2_prior, "tau2_prior",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(tau2_prior, "tau2_prior",
                           stan::model::index_uni(2))));
        current_statement__ = 60;
        if (stan::math::logical_eq(phidist, 0)) {
          current_statement__ = 59;
          lp_accum__.add(stan::math::uniform_lpdf<propto__>(phi,
                           stan::model::rvalue(prior_phi_param,
                             "prior_phi_param", stan::model::index_uni(1)),
                           stan::model::rvalue(prior_phi_param,
                             "prior_phi_param", stan::model::index_uni(2))));
        }
        current_statement__ = 62;
        if (stan::math::logical_eq(phidist, 1)) {
          current_statement__ = 61;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(phi,
                           stan::model::rvalue(prior_phi_param,
                             "prior_phi_param", stan::model::index_uni(1)),
                           stan::model::rvalue(prior_phi_param,
                             "prior_phi_param", stan::model::index_uni(2))));
        }
        current_statement__ = 64;
        if (stan::math::logical_eq(phidist, 2)) {
          current_statement__ = 63;
          lp_accum__.add(stan::math::cauchy_lpdf<propto__>(phi,
                           stan::model::rvalue(prior_phi_param,
                             "prior_phi_param", stan::model::index_uni(1)),
                           stan::model::rvalue(prior_phi_param,
                             "prior_phi_param", stan::model::index_uni(2))));
        }
        current_statement__ = 66;
        if (stan::math::logical_gt(phidist, 2)) {
          current_statement__ = 65;
          std::stringstream errmsg_stream__;
          stan::math::stan_print(&errmsg_stream__,
            "Wrong prior distribution for phi; found phidist=");
          stan::math::stan_print(&errmsg_stream__, phidist);
          throw std::domain_error(errmsg_stream__.str());
        }
        current_statement__ = 68;
        for (int i = 1; i <= ntobs; ++i) {
          current_statement__ = 67;
          stan::model::assign(z1,
            stan::model::rvalue(yobs, "yobs", stan::model::index_uni(i)),
            "assigning variable z1",
            stan::model::index_uni(
              stan::model::rvalue(data_obs_idx, "data_obs_idx",
                stan::model::index_uni(i))));
        }
        current_statement__ = 72;
        if (stan::math::logical_gt(missing, 0)) {
          current_statement__ = 70;
          for (int k = 1; k <= ntmiss; ++k) {
            current_statement__ = 69;
            stan::model::assign(z1,
              stan::model::rvalue(z_miss, "z_miss", stan::model::index_uni(k)),
              "assigning variable z1",
              stan::model::index_uni(
                stan::model::rvalue(data_miss_idx, "data_miss_idx",
                  stan::model::index_uni(k))));
          }
        }
        current_statement__ = 90;
        for (int i = 1; i <= nots; ++i) {
          current_statement__ = 73;
          stan::math::validate_non_negative_index("zt", "nts[i]",
            stan::model::rvalue(nts, "nts", stan::model::index_uni(i)));
          Eigen::Matrix<local_scalar_t__,-1,1> zt =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::model::rvalue(
                                                             nts, "nts",
                                                             stan::model::index_uni(
                                                               i)),
              DUMMY_VAR__);
          current_statement__ = 75;
          stan::math::validate_non_negative_index("mut", "nts[i]",
            stan::model::rvalue(nts, "nts", stan::model::index_uni(i)));
          Eigen::Matrix<local_scalar_t__,-1,1> mut =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::model::rvalue(
                                                             nts, "nts",
                                                             stan::model::index_uni(
                                                               i)),
              DUMMY_VAR__);
          current_statement__ = 77;
          stan::math::validate_non_negative_index("St", "nts[i]",
            stan::model::rvalue(nts, "nts", stan::model::index_uni(i)));
          current_statement__ = 78;
          stan::math::validate_non_negative_index("St", "nts[i]",
            stan::model::rvalue(nts, "nts", stan::model::index_uni(i)));
          Eigen::Matrix<local_scalar_t__,-1,-1> St =
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(stan::model::rvalue(
                                                              nts, "nts",
                                                              stan::model::index_uni(
                                                                i)),
              stan::model::rvalue(nts, "nts", stan::model::index_uni(i)),
              DUMMY_VAR__);
          current_statement__ = 80;
          stan::model::assign(zt,
            stan::model::rvalue(z1, "z1",
              stan::model::index_min_max(
                stan::model::rvalue(start_row, "start_row",
                  stan::model::index_uni(i)),
                stan::model::rvalue(fin_row, "fin_row",
                  stan::model::index_uni(i)))), "assigning variable zt");
          current_statement__ = 81;
          stan::model::assign(mut,
            stan::model::rvalue(xbmodel, "xbmodel",
              stan::model::index_min_max(
                stan::model::rvalue(start_row, "start_row",
                  stan::model::index_uni(i)),
                stan::model::rvalue(fin_row, "fin_row",
                  stan::model::index_uni(i)))), "assigning variable mut");
          current_statement__ = 87;
          for (int k = 1; k <=
               stan::model::rvalue(nts, "nts", stan::model::index_uni(i)); ++k) {
            current_statement__ = 85;
            for (int j = 1; j <=
                 stan::model::rvalue(nts, "nts", stan::model::index_uni(i)); ++j) {
              current_statement__ = 82;
              stan::model::assign(St,
                stan::model::rvalue(bigS, "bigS", stan::model::index_uni(m)),
                "assigning variable St", stan::model::index_uni(k),
                stan::model::index_uni(j));
              current_statement__ = 83;
              m = (m + 1);
            }
          }
          current_statement__ = 88;
          lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(zt, mut, St));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_ind_gpp_marginal_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(p,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p);
      double phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      double sigma_sq = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma_sq = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      std::vector<double> z_miss =
        std::vector<double>(z_miss_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      z_miss = in__.template read<
                 std::vector<local_scalar_t__>>(z_miss_1dim__);
      double tau_sq = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      tau_sq = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> xbmodel =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> bigS =
        std::vector<double>(sumnt2, std::numeric_limits<double>::quiet_NaN());
      out__.write(beta);
      out__.write(phi);
      out__.write(sigma_sq);
      out__.write(z_miss);
      out__.write(tau_sq);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      {
        current_statement__ = 8;
        stan::math::validate_non_negative_index("Sigma", "m2", m2);
        current_statement__ = 9;
        stan::math::validate_non_negative_index("Sigma", "m2", m2);
        Eigen::Matrix<double,-1,-1> Sigma =
          Eigen::Matrix<double,-1,-1>::Constant(m2, m2,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 11;
        stan::math::validate_non_negative_index("Swinv", "m2", m2);
        current_statement__ = 12;
        stan::math::validate_non_negative_index("Swinv", "m2", m2);
        Eigen::Matrix<double,-1,-1> Swinv =
          Eigen::Matrix<double,-1,-1>::Constant(m2, m2,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 14;
        stan::math::validate_non_negative_index("Cmat", "n", n);
        current_statement__ = 15;
        stan::math::validate_non_negative_index("Cmat", "m2", m2);
        Eigen::Matrix<double,-1,-1> Cmat =
          Eigen::Matrix<double,-1,-1>::Constant(n, m2,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 17;
        stan::model::assign(xbmodel, stan::math::multiply(X, beta),
          "assigning variable xbmodel");
        current_statement__ = 23;
        for (int i = 1; i <= (m2 - 1); ++i) {
          current_statement__ = 21;
          for (int j = (i + 1); j <= m2; ++j) {
            current_statement__ = 18;
            stan::model::assign(Sigma,
              stan::math::exp(((-1 * phi) *
                stan::model::rvalue(dmat, "dmat", stan::model::index_uni(i),
                  stan::model::index_uni(j)))), "assigning variable Sigma",
              stan::model::index_uni(i), stan::model::index_uni(j));
            current_statement__ = 19;
            stan::model::assign(Sigma,
              stan::model::rvalue(Sigma, "Sigma", stan::model::index_uni(i),
                stan::model::index_uni(j)), "assigning variable Sigma",
              stan::model::index_uni(j), stan::model::index_uni(i));
          }
        }
        current_statement__ = 25;
        for (int i = 1; i <= m2; ++i) {
          current_statement__ = 24;
          stan::model::assign(Sigma, 1.0, "assigning variable Sigma",
            stan::model::index_uni(i), stan::model::index_uni(i));
        }
        current_statement__ = 26;
        stan::model::assign(Swinv, stan::math::inverse_spd(Sigma),
          "assigning variable Swinv");
        current_statement__ = 31;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 29;
          for (int j = 1; j <= m2; ++j) {
            current_statement__ = 27;
            stan::model::assign(Cmat,
              stan::math::exp(((-1 * phi) *
                stan::model::rvalue(Cdist, "Cdist",
                  stan::model::index_uni(i), stan::model::index_uni(j)))),
              "assigning variable Cmat", stan::model::index_uni(i),
              stan::model::index_uni(j));
          }
        }
        {
          int m = std::numeric_limits<int>::min();
          current_statement__ = 32;
          m = 1;
          current_statement__ = 51;
          for (int i = 1; i <= nots; ++i) {
            current_statement__ = 33;
            stan::math::validate_non_negative_index("St", "nts[i]",
              stan::model::rvalue(nts, "nts", stan::model::index_uni(i)));
            current_statement__ = 34;
            stan::math::validate_non_negative_index("St", "nts[i]",
              stan::model::rvalue(nts, "nts", stan::model::index_uni(i)));
            Eigen::Matrix<double,-1,-1> St =
              Eigen::Matrix<double,-1,-1>::Constant(stan::model::rvalue(nts,
                                                      "nts",
                                                      stan::model::index_uni(
                                                        i)),
                stan::model::rvalue(nts, "nts", stan::model::index_uni(i)),
                std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 36;
            stan::math::validate_non_negative_index("Ct", "nts[i]",
              stan::model::rvalue(nts, "nts", stan::model::index_uni(i)));
            current_statement__ = 37;
            stan::math::validate_non_negative_index("Ct", "m2", m2);
            Eigen::Matrix<double,-1,-1> Ct =
              Eigen::Matrix<double,-1,-1>::Constant(stan::model::rvalue(nts,
                                                      "nts",
                                                      stan::model::index_uni(
                                                        i)), m2,
                std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 39;
            stan::model::assign(Ct,
              stan::model::rvalue(Cmat, "Cmat",
                stan::model::index_min_max(
                  stan::model::rvalue(start_row, "start_row",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(fin_row, "fin_row",
                    stan::model::index_uni(i))), stan::model::index_omni()),
              "assigning variable Ct");
            current_statement__ = 40;
            stan::model::assign(St,
              stan::math::multiply(
                stan::math::multiply(stan::math::multiply(sigma_sq, Ct),
                  Swinv), stan::math::transpose(Ct)), "assigning variable St");
            current_statement__ = 43;
            for (int j = 1; j <=
                 stan::model::rvalue(nts, "nts", stan::model::index_uni(i)); ++j) {
              current_statement__ = 41;
              stan::model::assign(St,
                (stan::model::rvalue(St, "St", stan::model::index_uni(j),
                   stan::model::index_uni(j)) + tau_sq),
                "assigning variable St", stan::model::index_uni(j),
                stan::model::index_uni(j));
            }
            current_statement__ = 49;
            for (int k = 1; k <=
                 stan::model::rvalue(nts, "nts", stan::model::index_uni(i)); ++k) {
              current_statement__ = 47;
              for (int j = 1; j <=
                   stan::model::rvalue(nts, "nts", stan::model::index_uni(i)); ++j) {
                current_statement__ = 44;
                stan::model::assign(bigS,
                  stan::model::rvalue(St, "St", stan::model::index_uni(k),
                    stan::model::index_uni(j)), "assigning variable bigS",
                  stan::model::index_uni(m));
                current_statement__ = 45;
                m = (m + 1);
              }
            }
          }
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(xbmodel);
        out__.write(bigS);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p),
        "assigning variable beta");
      out__.write(beta);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 2;
      phi = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, phi);
      local_scalar_t__ sigma_sq = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_sq = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_sq);
      std::vector<local_scalar_t__> z_miss =
        std::vector<local_scalar_t__>(z_miss_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(z_miss,
        in__.read<std::vector<local_scalar_t__>>(z_miss_1dim__),
        "assigning variable z_miss");
      out__.write(z_miss);
      local_scalar_t__ tau_sq = DUMMY_VAR__;
      current_statement__ = 5;
      tau_sq = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_sq);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(p)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sigma_sq",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "z_miss", "double",
        std::vector<size_t>{static_cast<size_t>(z_miss_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "tau_sq", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 2;
      phi = context__.vals_r("phi")[(1 - 1)];
      out__.write_free_lb(0, phi);
      local_scalar_t__ sigma_sq = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_sq = context__.vals_r("sigma_sq")[(1 - 1)];
      out__.write_free_lb(0, sigma_sq);
      std::vector<local_scalar_t__> z_miss =
        std::vector<local_scalar_t__>(z_miss_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      z_miss = context__.vals_r("z_miss");
      out__.write(z_miss);
      local_scalar_t__ tau_sq = DUMMY_VAR__;
      current_statement__ = 5;
      tau_sq = context__.vals_r("tau_sq")[(1 - 1)];
      out__.write_free_lb(0, tau_sq);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "phi", "sigma_sq", "z_miss",
                "tau_sq"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"xbmodel", "bigS"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(p)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(z_miss_1dim__)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(sumnt2)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "phi");
    param_names__.emplace_back(std::string() + "sigma_sq");
    for (int sym1__ = 1; sym1__ <= z_miss_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_miss" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tau_sq");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "xbmodel" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= sumnt2; ++sym1__) {
        param_names__.emplace_back(std::string() + "bigS" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "phi");
    param_names__.emplace_back(std::string() + "sigma_sq");
    for (int sym1__ = 1; sym1__ <= z_miss_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_miss" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tau_sq");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "xbmodel" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= sumnt2; ++sym1__) {
        param_names__.emplace_back(std::string() + "bigS" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_miss\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_miss_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"tau_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xbmodel\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"bigS\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sumnt2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_miss\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_miss_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"tau_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xbmodel\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"bigS\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sumnt2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((p + 1) + 1) + z_miss_1dim__) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((n +
      sumnt2));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((p + 1) + 1) + z_miss_1dim__) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((n +
      sumnt2));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_ind_gpp_marginal_namespace::model_ind_gpp_marginal;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ind_gpp_marginal_namespace::profiles__;
}
#endif
#endif
